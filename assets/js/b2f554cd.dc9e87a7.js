"use strict";(self.webpackChunkquantii_research=self.webpackChunkquantii_research||[]).push([[477],{10:e=>{e.exports=JSON.parse('{"blogPosts":[{"id":"/isa-pt1","metadata":{"permalink":"/blog/isa-pt1","source":"@site/blog/isa-pt1.md","title":"Instruction Set Architecture from First Principles: Part 1","description":"Instructions are imperative by default on atomic execution environments. This is probably because digital electronics are ubiquitous and hence most modern atomic instructions are built from discrete signals. If it was built from continuous signals, perhaps we could have something quite different, and not imperative. I think its still possible to have \\"declarative\\" instructions.","date":"2022-12-18T00:00:00.000Z","formattedDate":"December 18, 2022","tags":[],"readingTime":1.905,"hasTruncateMarker":false,"authors":[],"frontMatter":{"date":"2022-12-18T00:00:00.000Z","name":"Jasen Qin","title":"Instruction Set Architecture from First Principles: Part 1","url":"https://github.com/hyperswine","email":"jasen.qin33@gmail.com"},"nextItem":{"title":"Performance Considerations, Pt. 1","permalink":"/blog/performance-post"}},"content":"Instructions are imperative by default on atomic execution environments. This is probably because digital electronics are ubiquitous and hence most modern atomic instructions are built from discrete signals. If it was built from continuous signals, perhaps we could have something quite different, and not imperative. I think its still possible to have \\"declarative\\" instructions.\\n\\n## ISA: Spectre\\n\\nThe spectre ISA is designed for minimalist, functional computing. How do we verify that an ISA is enlightened? Well it should be:\\n\\n- Well represented. That means probably turing complete or total turing complete\\n- Encourage directness and low overhead. A language that compiles to it would essentially look the same or similar to what one would expect\\n- Encourage expressiveness. No point in a language that that a billion instructions just to do something small. Should be proportional in a logical human centric manner\\n\\n## Vectorisation\\n\\nArray programming is possibly one of the most effective methods of programming. Most non trivial programs can be represented as a sequence of steps that operate on an initially set up set of data.\\n\\nTreating arrays as first class citizens seems to allow the conciseness that is APL. Lisp and haskell also benefit. If 70% of all code is in for loops, we should be able to convert them to `for_each` iterators and unordered `map`s. With const eval and eager execution we could make a bunch of simplifications at compile time which would allow the resulting code to be more readily vectorised into `vadd` type instructions. Inlining too. As long as theres no \\"fixed\\" operations like `sleep()` that places a certain restraint during execution to not allow simple vector ops.\\n\\n## Halting Problem\\n\\nThe halting problem is quite simple yet complex. It can be applied to many situations. Many types of programs can be reduced to a formulation of the halting problem, and it is useful in ensuruing a program doesn\'t just hang there doing nothing.\\n\\nOf interest are total functional programming languages. These langs are \\"provably terminating\\", i.e. you can guarentee statically that they will eventually halt.\\n\\nWhat if, an ISA itself could implement a total functional language that bypasses the halting problem? Or perhaps a compiler?\\n\\n---\\n\\n<h2 style={{textAlign: \\"center\\"}}>Discuss</h2>\\n\\n<giscus-widget repo=\\"hyperswine/projects\\"\\n        repoid=\\"R_kgDOIZg-sQ\\"\\n        category=\\"Announcements\\"\\n        categoryid=\\"DIC_kwDOIZg-sc4CSmin\\"\\n        mapping=\\"pathname\\"\\n        strict=\\"0\\"\\n        reactionsenabled=\\"1\\"\\n        emitmetadata=\\"0\\"\\n        inputposition=\\"top\\"\\n        theme=\\"preferred_color_scheme\\"\\n        lang=\\"en\\"\\n        loading=\\"lazy\\"\\n        crossorigin=\\"anonymous\\">\\n</giscus-widget>"},{"id":"/performance-post","metadata":{"permalink":"/blog/performance-post","source":"@site/blog/performance-post.md","title":"Performance Considerations, Pt. 1","description":"What is performance and why do we care?","date":"2022-12-17T00:00:00.000Z","formattedDate":"December 17, 2022","tags":[],"readingTime":0.7,"hasTruncateMarker":false,"authors":[],"frontMatter":{"date":"2022-12-17T00:00:00.000Z","name":"Jasen Qin","title":"Performance Considerations, Pt. 1","url":"https://github.com/hyperswine","email":"jasen.qin33@gmail.com"},"prevItem":{"title":"Instruction Set Architecture from First Principles: Part 1","permalink":"/blog/isa-pt1"}},"content":"**What is performance and why do we care?**\\n\\nThat is a great question. Lets attempt to answer that.\\n\\n## Benchmarks of software\\n\\nA lot of optimisations can be done in software itself. In my view, 99% of the optimisation should be done in software as a profile for that specific set of hardware. But then again, the code itself should probably be self-optimising in that it scales automatically with the number of execution units and the clock speed of the units.\\n\\nBut by far the factor of interest is memory. Everything to do with memory. Whether that be memory bandwidth (and throughput), access speed & latency. A straightforward view of storage would possibly be a strong benefit for all computing applications.\\n\\n---\\n\\n<h2 style={{textAlign: \\"center\\"}}>Discuss</h2>\\n\\n<giscus-widget repo=\\"hyperswine/projects\\"\\n        repoid=\\"R_kgDOIZg-sQ\\"\\n        category=\\"Announcements\\"\\n        categoryid=\\"DIC_kwDOIZg-sc4CSmin\\"\\n        mapping=\\"pathname\\"\\n        strict=\\"0\\"\\n        reactionsenabled=\\"1\\"\\n        emitmetadata=\\"0\\"\\n        inputposition=\\"top\\"\\n        theme=\\"preferred_color_scheme\\"\\n        lang=\\"en\\"\\n        loading=\\"lazy\\"\\n        crossorigin=\\"anonymous\\">\\n</giscus-widget>"}]}')}}]);